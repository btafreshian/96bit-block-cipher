#include <array>
#include <iostream>

#include "cube96/cipher.hpp"

namespace {

struct Vector {
  std::array<std::uint8_t, cube96::CubeCipher::KeyBytes> key;
  std::array<std::uint8_t, cube96::CubeCipher::BlockBytes> plain;
  std::array<std::uint8_t, cube96::CubeCipher::BlockBytes> expect;
};

} // namespace

int main() {
  static const std::array<Vector, 3> vectors = {{
      Vector{{{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
             {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
             {{0xB6, 0x39, 0x3A, 0xE0, 0xD2, 0xE9, 0xA2, 0xC7, 0x71, 0xE6, 0x19, 0xFA}}},
      Vector{{{0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF}},
             {{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00}},
             {{0x99, 0xF0, 0xC3, 0xE4, 0x2E, 0xAE, 0xCF, 0xE6, 0x2B, 0x19, 0xD0, 0x93}}},
      Vector{{{0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B}},
             {{0x0C, 0x0D, 0x0E, 0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17}},
             {{0x07, 0xE1, 0xE8, 0xAF, 0xE7, 0x4F, 0x1F, 0xFA, 0xF3, 0x27, 0x54, 0x9A}}},
  }};

  cube96::CubeCipher cipher;
  for (std::size_t i = 0; i < vectors.size(); ++i) {
    const auto &vec = vectors[i];
    cipher.setKey(vec.key.data());
    std::array<std::uint8_t, cube96::CubeCipher::BlockBytes> out{};
    cipher.encryptBlock(vec.plain.data(), out.data());
    if (out != vec.expect) {
      std::cerr << "Vector " << i << " mismatch\n";
      return 1;
    }
  }

  std::cout << "test_vectors: OK\n";
  return 0;
}
